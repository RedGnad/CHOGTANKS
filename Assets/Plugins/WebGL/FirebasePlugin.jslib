mergeInto(LibraryManager.library, {
  // Fonction d'initialisation pour g√©rer les erreurs WebAssembly
  InitializeWasmErrorHandler: function () {
    // Gestion des erreurs WebAssembly courantes
    window.addEventListener("error", function (e) {
      if (
        e &&
        e.message &&
        (e.message.indexOf("wasm") !== -1 ||
          e.message.indexOf("memory") !== -1 ||
          e.message.indexOf("out of memory") !== -1)
      ) {
        console.error("[WebGL/WASM] Erreur d√©tect√©e: " + e.message);

        // Afficher un message utilisateur adapt√©
        if (!window.wasmErrorShown) {
          window.wasmErrorShown = true;

          var container = document.createElement("div");
          container.style.position = "absolute";
          container.style.width = "80%";
          container.style.top = "20%";
          container.style.left = "10%";
          container.style.backgroundColor = "rgba(0,0,0,0.8)";
          container.style.color = "white";
          container.style.padding = "20px";
          container.style.borderRadius = "10px";
          container.style.zIndex = "999";
          container.style.textAlign = "center";
          container.style.fontFamily = "Arial, sans-serif";

          container.innerHTML =
            "<h3>Probl√®me de compatibilit√© d√©tect√©</h3>" +
            "<p>Votre appareil ne dispose peut-√™tre pas de suffisamment de m√©moire pour ex√©cuter ce jeu.</p>" +
            "<p>Essayez de fermer d'autres applications et de rafra√Æchir la page.</p>" +
            '<button id="retryButton" style="padding: 10px; background-color: #4CAF50; border: none; color: white; border-radius: 5px; margin-top: 10px;">R√©essayer</button>';

          document.body.appendChild(container);

          document
            .getElementById("retryButton")
            .addEventListener("click", function () {
              location.reload();
            });
        }

        return true; // Emp√™cher la propagation de l'erreur
      }
    });

    // Optimisation pour les appareils mobiles √† faible capacit√©
    if (
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      )
    ) {
      // R√©duire la qualit√© des textures
      if (unityInstance && unityInstance.Module) {
        console.log("[WebGL] Optimisation pour mobile activ√©e");
      }
    }
  },

  // Initialisation de Firebase
  InitializeFirebaseJS: function () {
    try {
      console.log("Firebase d√©j√† initialis√© depuis index.html");
      return true;
    } catch (error) {
      console.error("Erreur d'initialisation Firebase:", error);
      return false;
    }
  },

  // Soumettre un score
  SubmitScoreJS: function (score, bonus, walletAddress) {
    // V√©rification stricte d'adresse Ethereum (0x + 40 hex)
    function isValidEthAddress(addr) {
      return /^0x[a-fA-F0-9]{40}$/.test(addr);
    }
    try {
      const scoreValue = parseInt(UTF8ToString(score), 10);
      const bonusValue = parseInt(UTF8ToString(bonus), 10) || 0;
      const address = UTF8ToString(walletAddress);

      // Validation plus permissive
      if (!address) {
        console.error("[SCORE] Adresse invalide ou vide");
        return false;
      }

      // Normalisation syst√©matique
      const normalizedAddress = address.toLowerCase().trim();
      if (!isValidEthAddress(normalizedAddress)) {
        console.error(
          `[SCORE][SECURITE] Adresse Ethereum invalide pour soumission score: '${normalizedAddress}'`
        );
        return false;
      }

      const totalScore = scoreValue + bonusValue;

      // G√©n√©rer un ID unique pour cette session de jeu
      // Si on n'a pas encore d'ID de session pour ce score, on en cr√©e un
      if (!window.lastScoreSessionId) {
        window.lastScoreSessionId = Date.now().toString();
        window.lastScoreValue = totalScore;
        console.log(
          `[SCORE] Nouvelle session de score #${window.lastScoreSessionId}, valeur: ${totalScore}`
        );
      } else if (window.lastScoreValue === totalScore) {
        // M√™me score d√©tect√© = probable doublon
        console.warn(
          `[SCORE] ‚ö†Ô∏è Doublon probable d√©tect√©! Score ${totalScore} d√©j√† soumis r√©cemment. Ignorant.`
        );
        return true; // Ignorer silencieusement le doublon
      } else {
        // Nouveau score diff√©rent = nouvelle session
        window.lastScoreSessionId = Date.now().toString();
        window.lastScoreValue = totalScore;
        console.log(
          `[SCORE] Nouvelle session de score #${window.lastScoreSessionId}, valeur: ${totalScore}`
        );
      }

      console.log(
        `[SCORE] Score soumis √† Firebase pour ${normalizedAddress}: ${scoreValue} (+${bonusValue})`
      );

      firebase.auth().onAuthStateChanged((user) => {
        if (user) {
          const db = firebase.firestore();
          const docRef = db.collection("WalletScores").doc(normalizedAddress);

          // V√©rifier d'abord si le document existe
          docRef
            .get()
            .then((doc) => {
              if (!doc.exists) {
                // Cr√©ation d'un nouveau document sans condition
                docRef
                  .set({
                    score: totalScore,
                    nftLevel: 0, // Initialisation √† 0
                    walletAddress: normalizedAddress,
                    lastUpdated:
                      firebase.firestore.FieldValue.serverTimestamp(),
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                  })
                  .then(() => {
                    console.log(
                      `[SCORE] ‚úÖ Nouveau document cr√©√© pour ${normalizedAddress} avec score: ${totalScore}`
                    );
                  })
                  .catch((error) => {
                    console.error(
                      "[SCORE] ‚ùå Erreur cr√©ation document:",
                      error
                    );
                  });
              } else {
                // Mise √† jour du document existant sans v√©rification de timestamp
                const currentScore = Number(doc.data().score || 0);

                // Addition normale des scores (la d√©tection des doublons en amont √©vite les doubles envois)
                const newScore = currentScore + totalScore;
                console.log(
                  `[SCORE] Addition des scores: ${currentScore} + ${totalScore} = ${newScore}`
                );

                docRef
                  .update(
                    {
                      score: newScore,
                      walletAddress: normalizedAddress,
                      lastUpdated:
                        firebase.firestore.FieldValue.serverTimestamp(),
                    },
                    { merge: true }
                  ) // Utiliser merge pour √™tre plus permissif
                  .then(() => {
                    console.log(
                      `[SCORE] üöÄ Score soumis √† Firebase pour ${normalizedAddress}: ${newScore} (${currentScore} + ${totalScore})`
                    );
                  })
                  .catch((error) => {
                    // En cas d'erreur, essayer une approche encore plus permissive
                    console.warn(
                      "[SCORE] ‚ö†Ô∏è Premi√®re tentative √©chou√©e, essai alternatif:",
                      error
                    );

                    // Tentative alternative avec set et merge
                    docRef
                      .set(
                        {
                          score: newScore,
                          walletAddress: normalizedAddress,
                          lastUpdated:
                            firebase.firestore.FieldValue.serverTimestamp(),
                        },
                        { merge: true }
                      )
                      .then(() => {
                        console.log(
                          `[SCORE] ‚úÖ Score mis √† jour (m√©thode alternative) pour ${normalizedAddress}: ${newScore}`
                        );
                      })
                      .catch((error2) => {
                        console.error(
                          "[SCORE] ‚ùå Erreur critique mise √† jour score:",
                          error2
                        );
                      });
                  });
              }
            })
            .catch((error) => {
              console.error("[SCORE] ‚ùå Erreur r√©cup√©ration document:", error);
            });
        } else {
          console.log("[SCORE] Auth anonyme en cours...");
          firebase
            .auth()
            .signInAnonymously()
            .catch((error) => {
              console.error("[SCORE] Erreur auth:", error);
            });
        }
      });

      return true;
    } catch (error) {
      console.error("[SCORE] Erreur SubmitScoreJS:", error);
      return false;
    }
  },

  // V√©rifier si le wallet peut minter un NFT (nftLevel == 0)
  CanMintNFTJS: function (walletAddress, callbackMethod) {
    try {
      const address = UTF8ToString(walletAddress);
      const callback = UTF8ToString(callbackMethod);
      const normalizedAddress = address.toLowerCase().trim();

      console.log(
        `[NFT] CanMintNFTJS called with address: ${address}, callback: ${callback}`
      );

      // V√©rifier si unityInstance est d√©fini
      if (typeof unityInstance === "undefined") {
        console.error(
          "[NFT][ERREUR CRITIQUE] unityInstance n'est pas d√©fini dans CanMintNFTJS"
        );
        return false;
      }

      if (!callback || callback.trim() === "") {
        console.error("[NFT] Callback method name is empty!");
        return false;
      }
      if (!/^0x[a-fA-F0-9]{40}$/.test(normalizedAddress)) {
        console.error(
          `[NFT][SECURITE] Adresse Ethereum invalide pour CanMintNFTJS: '${normalizedAddress}'`
        );
        unityInstance.SendMessage(
          "ChogTanksNFTManager",
          callback,
          JSON.stringify({ canMint: false, error: "Adresse Ethereum invalide" })
        );
        return false;
      }

      // V√©rifier si firebase est d√©fini
      if (typeof firebase === "undefined") {
        console.error(
          "[NFT][ERREUR] Firebase n'est pas initialis√© dans CanMintNFTJS"
        );
        unityInstance.SendMessage(
          "ChogTanksNFTManager",
          callback,
          JSON.stringify({ canMint: false, error: "Firebase non initialis√©" })
        );
        return false;
      }

      firebase.auth().onAuthStateChanged(function (user) {
        if (user) {
          const db = firebase.firestore();
          db.collection("WalletScores")
            .doc(normalizedAddress)
            .get()
            .then(function (doc) {
              let canMint = true;
              if (doc.exists && Number(doc.data().nftLevel || 0) > 0) {
                canMint = false;
              }
              unityInstance.SendMessage(
                "ChogTanksNFTManager",
                callback,
                JSON.stringify({ canMint: canMint })
              );
            })
            .catch(function (error) {
              console.error("[NFT] Erreur CanMintNFTJS:", error);
              unityInstance.SendMessage(
                "ChogTanksNFTManager",
                callback,
                JSON.stringify({ canMint: false, error: "Erreur Firestore" })
              );
            });
        } else {
          firebase.auth().signInAnonymously().catch(console.error);
          unityInstance.SendMessage(
            "ChogTanksNFTManager",
            callback,
            JSON.stringify({ canMint: false, error: "Non authentifi√©" })
          );
        }
      });
      return true;
    } catch (error) {
      console.error("[NFT] Erreur CanMintNFTJS:", error);
      unityInstance.SendMessage(
        "ChogTanksNFTManager",
        callback,
        JSON.stringify({ canMint: false, error: "Exception JS" })
      );
      return false;
    }
  },

  // Mettre √† jour le niveau NFT
  UpdateNFTLevelJS: function (walletAddress, newLevel) {
    // Log explicite pour debug
    console.log(
      "[NFT][DEBUG] UpdateNFTLevelJS called with:",
      walletAddress,
      newLevel
    );
    try {
      const address = UTF8ToString(walletAddress);
      // Ne pas utiliser UTF8ToString pour newLevel car c'est d√©j√† un entier
      let nftLevel = newLevel;

      console.log(
        `[NFT] Traitement de la mise √† jour niveau: adresse=${address}, niveau=${nftLevel}`
      );

      // Protection contre les valeurs invalides
      if (nftLevel === 0 || isNaN(nftLevel) || !isFinite(nftLevel)) {
        console.warn(
          `[NFT] Niveau NFT invalide re√ßu: ${nftLevel}. Utilisation valeur par d√©faut '1' (mint initial)`
        );
        nftLevel = 1; // Valeur par d√©faut pour mint initial
      }

      const normalizedAddress = address.toLowerCase().trim();
      console.log(
        `[NFT] Mise √† jour niveau NFT: ${nftLevel} pour ${normalizedAddress}`
      );

      firebase.auth().onAuthStateChanged((user) => {
        if (user) {
          const db = firebase.firestore();

          // Forcer le type number pour nftLevel
          const nftLevelNumber = Number(nftLevel);

          db.collection("WalletScores")
            .doc(normalizedAddress)
            .set(
              {
                nftLevel: nftLevelNumber, // Utiliser la variable convertie explicitement
                walletAddress: normalizedAddress,
                lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
              },
              { merge: true }
            )
            .then(() => {
              console.log(`[NFT] Niveau NFT mis √† jour: ${nftLevelNumber}`);
              if (typeof unityInstance !== "undefined") {
                unityInstance.SendMessage(
                  "ChogTanksNFTManager",
                  "OnNFTLevelUpdated",
                  String(nftLevelNumber)
                );
              }
            })
            .catch((error) => {
              console.error("[NFT] Erreur mise √† jour niveau:", error);
            });
        } else {
          console.log("[NFT] Auth anonyme en cours...");
          firebase.auth().signInAnonymously().catch(console.error);
        }
      });

      return true;
    } catch (error) {
      console.error("[NFT] Erreur UpdateNFTLevelJS:", error);
      return false;
    }
  },

  // Mettre √† jour √† la fois le tokenId et le niveau NFT dans Firebase
  UpdateNFTDataJS: function (walletAddress, tokenId, newLevel) {
    try {
      const address = UTF8ToString(walletAddress);
      const tokenIdValue = tokenId; // tokenId est d√©j√† un entier car Unity l'envoie comme tel
      const levelValue = newLevel; // newLevel est d√©j√† un entier car Unity l'envoie comme tel

      // Validation de l'adresse
      if (!address) {
        console.error("[NFT] Adresse invalide ou vide");
        return false;
      }

      // Normalisation syst√©matique de l'adresse
      const normalizedAddress = address.toLowerCase().trim();

      console.log(
        `[NFT] Mise √† jour compl√®te NFT dans Firebase: Wallet=${normalizedAddress}, TokenID=${tokenIdValue}, Level=${levelValue}`
      );

      firebase.auth().onAuthStateChanged(function (user) {
        if (user) {
          const db = firebase.firestore();
          const docRef = db.collection("WalletScores").doc(normalizedAddress);

          // Mise √† jour atomique du document avec les deux valeurs
          docRef
            .update({
              tokenId: tokenIdValue,
              nftLevel: levelValue,
              lastUpdated: firebase.firestore.FieldValue.serverTimestamp(),
            })
            .then(function () {
              console.log(
                `[NFT] ‚úÖ Mise √† jour compl√®te NFT r√©ussie: TokenID=${tokenIdValue}, Level=${levelValue}`
              );

              // Double v√©rification imm√©diate (lecture apr√®s √©criture)
              setTimeout(function () {
                docRef.get().then(function (doc) {
                  if (doc.exists) {
                    const data = doc.data();
                    console.log(
                      `[NFT] V√©rification apr√®s mise √† jour: tokenId=${data.tokenId}, nftLevel=${data.nftLevel}`
                    );

                    // Si les valeurs ne correspondent pas, r√©essayer une fois
                    if (
                      data.tokenId !== tokenIdValue ||
                      data.nftLevel !== levelValue
                    ) {
                      console.warn(
                        `[NFT] ‚ö†Ô∏è Incoh√©rence d√©tect√©e, nouvel essai de mise √† jour...`
                      );

                      // Deuxi√®me tentative avec set et merge pour s'assurer que les valeurs sont √©crites
                      docRef.set(
                        {
                          tokenId: tokenIdValue,
                          nftLevel: levelValue,
                          lastUpdated:
                            firebase.firestore.FieldValue.serverTimestamp(),
                        },
                        { merge: true }
                      );
                    }
                  }
                });
              }, 1000); // V√©rification apr√®s 1 seconde
            })
            .catch(function (error) {
              console.error(
                "[NFT] ‚ùå Erreur lors de la mise √† jour NFT:",
                error
              );

              // En cas d'erreur avec update, essayer set avec merge comme fallback
              docRef
                .set(
                  {
                    tokenId: tokenIdValue,
                    nftLevel: levelValue,
                    lastUpdated:
                      firebase.firestore.FieldValue.serverTimestamp(),
                  },
                  { merge: true }
                )
                .then(function () {
                  console.log(`[NFT] ‚úÖ Mise √† jour NFT par fallback r√©ussie`);
                })
                .catch(function (error) {
                  console.error(
                    "[NFT] ‚ùå √âchec complet de mise √† jour NFT:",
                    error
                  );
                });
            });
        } else {
          console.log("[NFT] Auth anonyme en cours...");
          firebase
            .auth()
            .signInAnonymously()
            .catch(function (error) {
              console.error("[NFT] ‚ùå √âchec authentification anonyme:", error);
            });
        }
      });

      return true;
    } catch (error) {
      console.error("[NFT] ‚ùå Exception dans UpdateNFTDataJS:", error);
      return false;
    }
  },

  // V√©rifier l'√©ligibilit√© √† l'√©volution
  CheckEvolutionEligibilityJS: function (walletAddress) {
    try {
      const address = UTF8ToString(walletAddress);
      const normalizedAddress = address.toLowerCase().trim();
      console.log(`[EVOL] V√©rification √©ligibilit√© pour ${normalizedAddress}`);

      firebase.auth().onAuthStateChanged((user) => {
        if (user) {
          const db = firebase.firestore();

          db.collection("WalletScores")
            .doc(normalizedAddress)
            .get()
            .then((doc) => {
              if (doc.exists) {
                const data = doc.data();
                // S'assurer d'avoir des nombres valides avec conversion explicite
                const currentScore = Number(data.score || 0);
                const currentLevel = Number(data.nftLevel || 0);

                // Logique d'√©ligibilit√© selon les seuils sp√©cifiques
                let requiredScore;
                if (currentLevel === 1) {
                  // D√©j√† au niveau 1, pour niveau 2
                  requiredScore = 2; // Niveau 1->2 n√©cessite seulement 2 points
                } else if (currentLevel >= 2) {
                  // Niveau 2 et plus
                  requiredScore = 100 * (currentLevel - 1); // Niveau 2->3 = 100 points, 3->4 = 200 points, etc.
                } else {
                  requiredScore = 0; // Cas impossible (currentLevel = 0 = pas de NFT)
                }
                const isEligible = currentScore >= requiredScore;

                console.log(
                  `[EVOL] Score ${currentScore}, niveau ${currentLevel}, requis ${requiredScore}, √©ligible: ${isEligible}`
                );
                if (typeof unityInstance !== "undefined") {
                  unityInstance.SendMessage(
                    "ChogTanksNFTManager",
                    "OnEvolutionCheckComplete",
                    JSON.stringify({
                      authorized: Boolean(isEligible),
                      score: Number(currentScore) || 0,
                      requiredScore: Number(requiredScore) || 0,
                      currentLevel: Number(currentLevel) || 0,
                    })
                  );
                }
              } else {
                // Document n'existe pas
                console.log(`[EVOL] Aucun document pour ${normalizedAddress}`);
                if (typeof unityInstance !== "undefined") {
                  unityInstance.SendMessage(
                    "ChogTanksNFTManager",
                    "OnEvolutionCheckComplete",
                    JSON.stringify({
                      authorized: false,
                      score: 0,
                      currentLevel: 0,
                      requiredScore: 100,
                      error: "Aucun document trouv√©",
                    })
                  );
                }
              }
            })
            .catch((error) => {
              console.error("[EVOL] Erreur v√©rification:", error);
            });
        } else {
          console.log("[EVOL] Auth anonyme en cours...");
          firebase.auth().signInAnonymously().catch(console.error);
        }
      });

      return true;
    } catch (error) {
      console.error("[EVOL] Erreur CheckEvolutionEligibilityJS:", error);
      return false;
    }
  },

  // Obtenir l'√©tat actuel du NFT
  GetNFTStateJS: function (walletAddress) {
    try {
      const address = UTF8ToString(walletAddress);
      const normalizedAddress = address.toLowerCase().trim();
      console.log(
        `[NFT][DEBUG] GetNFTStateJS - R√©cup√©ration de l'√©tat NFT pour: ${normalizedAddress}`
      );

      // Cr√©er une r√©ponse par d√©faut
      let response = {
        hasNFT: false,
        level: 0,
        score: 0,
        walletAddress: normalizedAddress,
      };

      // V√©rifier si Firebase est initialis√©
      if (typeof firebase === "undefined" || !firebase.apps.length) {
        console.error(
          "[NFT][ERREUR] Firebase n'est pas initialis√© dans GetNFTStateJS"
        );
        // Essai de recuperation de unityInstance en cas d'erreur
        if (typeof unityInstance !== "undefined") {
          console.log(
            "[NFT][DEBUG] unityInstance est d√©fini, envoi du message de fallback"
          );
          unityInstance.SendMessage(
            "ChogTanksNFTManager",
            "OnNFTStateLoaded",
            JSON.stringify(response)
          );
        } else {
          console.error(
            "[NFT][ERREUR CRITIQUE] unityInstance n'est pas d√©fini dans GetNFTStateJS"
          );
        }
        return;
      }

      console.log("[NFT][DEBUG] Avant firebase.auth().onAuthStateChanged");
      firebase.auth().onAuthStateChanged(function (user) {
        console.log(
          "[NFT][DEBUG] Dans onAuthStateChanged, user:",
          user ? "connect√©" : "non connect√©"
        );
        if (user) {
          console.log(
            "[NFT][DEBUG] Utilisateur authentifi√©, acc√®s √† Firestore"
          );
          const db = firebase.firestore();

          db.collection("WalletScores")
            .doc(normalizedAddress)
            .get()
            .then(function (doc) {
              console.log(
                "[NFT][DEBUG] Document Firestore r√©cup√©r√©, existe:",
                doc.exists
              );
              if (doc.exists) {
                const data = doc.data();
                // Forcer la conversion num√©rique pour √©viter les NaN
                const nftLevel = Number(data.nftLevel || 0);
                const score = Number(data.score || 0);

                response = {
                  hasNFT: nftLevel > 0,
                  level: nftLevel,
                  score: score,
                  walletAddress: normalizedAddress, // Toujours utiliser l'adresse normalis√©e
                };
              }

              console.log(
                `[NFT][DEBUG] √âtat r√©cup√©r√©: ${JSON.stringify(response)}`
              );
              // V√©rifier explicitement si unityInstance existe
              if (typeof unityInstance === "undefined") {
                console.error(
                  "[NFT][ERREUR CRITIQUE] unityInstance n'est pas d√©fini lors de l'envoi du r√©sultat"
                );
                return;
              }

              try {
                // Assurez-vous que tous les champs sont bien format√©s
                const safeResponse = {
                  hasNFT: Boolean(response.hasNFT),
                  level: Number(response.level) || 0,
                  score: Number(response.score) || 0,
                  walletAddress: String(response.walletAddress || ""),
                };
                console.log(
                  "[NFT][DEBUG] Envoi du r√©sultat √† Unity via SendMessage"
                );
                unityInstance.SendMessage(
                  "ChogTanksNFTManager",
                  "OnNFTStateLoaded",
                  JSON.stringify(safeResponse)
                );
                console.log("[NFT][DEBUG] SendMessage ex√©cut√© avec succ√®s");
              } catch (e) {
                console.error(
                  "[NFT][ERREUR CRITIQUE] Erreur lors de l'appel √† SendMessage:",
                  e
                );
              }
            })
            .catch(function (error) {
              console.error("[NFT][ERREUR] Erreur r√©cup√©ration √©tat:", error);
              // En cas d'erreur, essayer quand m√™me d'envoyer une r√©ponse par d√©faut
              if (typeof unityInstance !== "undefined") {
                unityInstance.SendMessage(
                  "ChogTanksNFTManager",
                  "OnNFTStateLoaded",
                  JSON.stringify(response)
                );
              }
            });
        } else {
          console.log("[NFT][DEBUG] Auth anonyme en cours...");
          firebase
            .auth()
            .signInAnonymously()
            .then(function () {
              console.log("[NFT][DEBUG] Authentification anonyme r√©ussie");
              // On ne fait rien ici, onAuthStateChanged sera rappel√© avec user non null
            })
            .catch(function (error) {
              console.error(
                "[NFT][ERREUR] √âchec authentification anonyme:",
                error
              );
              // En cas d'erreur, essayer quand m√™me d'envoyer une r√©ponse par d√©faut
              if (typeof unityInstance !== "undefined") {
                unityInstance.SendMessage(
                  "ChogTanksNFTManager",
                  "OnNFTStateLoaded",
                  JSON.stringify(response)
                );
              }
            });
        }
      });

      console.log("[NFT][DEBUG] GetNFTStateJS termin√© avec succ√®s");
      return true;
    } catch (error) {
      console.error(
        "[NFT][ERREUR CRITIQUE] Exception dans GetNFTStateJS:",
        error
      );
      try {
        // Essayer d'envoyer une r√©ponse par d√©faut m√™me en cas d'erreur
        if (typeof unityInstance !== "undefined") {
          const fallbackResponse = {
            hasNFT: false,
            level: 0,
            score: 0,
            walletAddress: UTF8ToString(walletAddress).toLowerCase().trim(),
          };
          unityInstance.SendMessage(
            "ChogTanksNFTManager",
            "OnNFTStateLoaded",
            JSON.stringify(fallbackResponse)
          );
        }
      } catch (e) {
        console.error(
          "[NFT][ERREUR FATALE] Impossible d'envoyer la r√©ponse de fallback:",
          e
        );
      }
      return false;
    }
  },
});
